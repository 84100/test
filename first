import numpy
import websocket
import json
import talib
import config
import datetime
from binance.client import Client
from binance.enums import *

# get API key and secret
client = Client(config.API_KEY, config.API_SECRET)

# SOCKET gets live stream of candle data, KLINES for historical data
SOCKET = "wss://fstream.binance.com/ws/ethusdt_perpetual@continuousKline_1m"
KLINES = client.futures_historical_klines("ETHUSDT", Client.KLINE_INTERVAL_1MINUTE, "1 day ago UTC")

# candle data
closes = []
highs = []
lows = []

# last 100 candles
last = []

# buy history
buys = []

# upper and lower bands for ATR, average true range
u_band = []
l_band = []

# asset in a trend, True / False
t_value = []

# profit / loss
pnl = 0.0
pnl_usd = 0.0

# position value
position_value = 0

# trend
trend = False

# once in position, keeps track of the highest price
low_price = 0
high_price = 0

# stoploss
stop_loss_short = 10000
stop_loss_long = 0

# number of trades taken
trade_total = 0

# average entry price
entry_av = 0

# RSI variables
RSI_PERIOD = 7
RSI_OVERBOUGHT = 0
RSI_OVERSOLD = 0

# asset pair
TRADE_TICK = 'ETHUSDT'

# how much asset to buy
TRADE_AMOUNT = 0.0

# short / long tracking
in_short = False
in_long = False

# get USD balance
balance = 50 #client.futures_account_balance(asset='USDT')

# order id
order_id = 0

# average entry
entry_price = 0.0

# quantity
qty = 0.0

count = 0

# store candle close, high and low data
for x in KLINES:
    closes.append(float(x[4]))
    highs.append(float(x[2]))
    lows.append(float(x[3]))
 
# take the price for last 100 candle closes
last = closes[-100:]

# checks required order precision 
def get_quantity_precision(currency_symbol):    

    info = client.futures_exchange_info() 
    info = info['symbols']

    for x in range(len(info)):
        if info[x]['symbol'] == currency_symbol:
            return info[x]['quantityPrecision']

    return None

# get the required order precision
precision = get_quantity_precision(TRADE_TICK)

# send a buy order to binance
def order(side, quantity, symbol, positionSide, order_type=FUTURE_ORDER_TYPE_MARKET):

    global qty
    global entry_price

    try:
        print("\n---> sending order")
        order = client.futures_create_order(symbol=symbol, side=side, type=order_type, positionSide=positionSide, quantity=quantity)
        order_id = int(order['orderId'])
        order_info = client.futures_get_order(symbol=TRADE_TICK, orderId=order_id)
        entry_price = float(order_info["avgPrice"])
        qty = float(order_info["executedQty"])
        print(f"\n---> completed {qty} @ ${entry_price}\n")

    except Exception as e:
        print(f"an exception occured 01 - {e}")
        return False

    return True

# confirmation of open / closed connection
def on_open(ws):

    print('\n *connected* \n')

def on_close(ws):

    print('\n   *disconnected* \n\n')
    
def on_error(ws, error):

    print(error)

# find the entry average
def average(a, n):

    sum = 0
    for i in range(n):
        sum += a[i]

    return sum/n

# calculates the trend, returns True / False
def supertrend(h, l, c, a, atr_multiplier=4):

    global u_band
    global l_band
    global t_value

    # calculate the upper, lower band and set trend variable
    hl = (h + l) / 2
    upperband = round(hl + (atr_multiplier * a), 2)
    lowerband = round(hl - (atr_multiplier * a), 2)
    in_uptrend = True

    # add results to array
    u_band.append(upperband)
    l_band.append(lowerband)
    t_value.append(in_uptrend)

    # if the close is greater than the upper band, trend is True. price below lower band, trend is False
    if c > u_band[-2]:
        t_value[-1] = True
    elif c < l_band[-2]:
        t_value[-1] = False
    
    # price between bands, trend remains the same
    else:
        t_value[-1] = t_value[-2]

        # trend is True and the lower band is decreasing, set lower band to previous value = lower band stays flat
        if t_value[-1] and l_band[-1] < l_band[-2]:
            l_band[-1] = l_band[-2]

        # trend is False and the upper band is increasing, set upper band to previous value = upper band stays flat
        if not t_value[-1] and u_band[-1] > u_band[-2]:
            u_band[-1] = u_band[-2]
    
    # return True / False
    return t_value[-1]

# main script, checks the buy / sell strategy 
def on_message(ws, message):

    global last
    global closes
    global trade_total
    global buys
    global low_price
    global high_price
    global entry_av
    global TRADE_AMOUNT
    global balance
    global highs
    global lows
    global trend
    global stop_loss_short
    global stop_loss_long
    global pnl
    global pnl_usd
    global position_value 
    global in_short
    global in_long
    global count

    # contains asset data
    json_message = json.loads(message)

    # get candle data from message
    candle = json_message['k']

    # is the candle closed?
    candle_closed = candle['x']

    # the price at close, high and low
    close = float(candle['c'])
    high = float(candle['h'])
    low = float(candle['l'])

    # print timestamp
    timestamp = datetime.datetime.now()
    count += 1
    if count % 15 == 0:
        print(f"\n\n---> {timestamp}\n")

    # when in a trade, log high/low price
    if in_short and close < low_price:
        low_price = close
        print(f"\n---> low price reset @ {low_price}")

    elif in_long and close > high_price:
        high_price = close
        print(f"\n---> high price reset @ {high_price}")
    
    # calculate stop loss & profit / loss
    if trade_total > 0:
        
        if in_short:
            # pnl calculation for USD
            pnl_usd = round((entry_av*TRADE_AMOUNT)-(close*TRADE_AMOUNT), 2)

            # pnl calc for %
            pnl = round((pnl_usd/(entry_av*TRADE_AMOUNT))*100, 2)      
            
            # position value
            position_value = round((entry_av*TRADE_AMOUNT)+pnl_usd, 2)

            # stop loss
            if low_price < entry_av*0.995:
                stop_loss_short = low_price+(low_price*0.001)
            
            else:
                stop_loss_short = u_band[-1]+(u_band[-1]*0.01)
        
        elif in_long:
            pnl_usd = round((close*TRADE_AMOUNT)-(entry_av*TRADE_AMOUNT), 2)

            pnl = round((pnl_usd/(entry_av*TRADE_AMOUNT))*100, 2)      

            position_value = round((entry_av*TRADE_AMOUNT)+pnl_usd, 2)

            if high_price > entry_av*1.005:
                stop_loss_long = high_price-(high_price*0.001)
            
            else:
                stop_loss_long = l_band[-1]-(l_band[-1]*0.01)
            
    # calculate indicators, update arrays and print info when candle closes    
    if candle_closed:

        # adds the last candle close data to arrays
        closes.append(close)
        highs.append(high)
        lows.append(low)
        last.append(close)
        last.pop(0)
        closes.pop(0)
        highs.pop(0)
        lows.pop(0)

        # convert to numpy arrays
        np_closes = numpy.array(closes)
        np_highs = numpy.array(highs)
        np_lows = numpy.array(lows)

        # send data to calculate ATR, RSI and SMA values 
        atr = talib.ATR(np_highs, np_lows, np_closes, timeperiod=4)
        rsi = talib.RSI(np_closes, RSI_PERIOD)
        sma = talib.SMA(np_closes, timeperiod=200)
       
        # get the last values for ATR, RSI and SMA
        last_sma = sma[-1]
        last_rsi = rsi[-1]
        last_atr = atr[-1]

        # calculate trend indicator
        trend = supertrend(high, low, close, last_atr)

        # print info
        print("\n\n-------------------------")
        print(f"---> upper band @ {u_band[-1]}\n---> lower band @ {l_band[-1]}")
        print("-------------------------")   
        print(f"\n\n---> last candle closed @ ${close}")
        print(f"\n---> {timestamp}")  
        print(f"\n---> trend @ {trend}\n")
        print(f"\n---> average entry @ ${entry_av}")
        print(f"\n---> current position value @ ${position_value}")
        print(f"\n---> PNL @ ${pnl_usd} - {pnl}%\n")

        if in_short:
            print(f"\n---> stop loss @ ${stop_loss_short}")
        
        elif in_long:
            print(f"\n---> stop loss @ ${stop_loss_long}")

    # if the price falls below the stop loss, create sell order
    if (not trend and t_value[-2]) or close < stop_loss_long:

        if in_long:

            # set the amount
            TRADE_AMOUNT = qty

            print("\n---> sell! sell! sell!")

            # create order
            order_succeeded = order(SIDE_SELL, TRADE_AMOUNT, TRADE_TICK, "LONG")

            # if the sell order is successful reset variables
            if order_succeeded:
                in_long = False
                balance = position_value
                position_value = 0
                trade_total = 0
                stop_loss_long = 0
                entry_av = 0
                pnl = 0.0
                pnl_usd = 0.0
                high_price = 0
                TRADE_AMOUNT = 0
                buys.clear()
            
        if not in_short and not trend:
            
            print(f"\n---> short! short! short!")

            # get the calculated trade amount
            TRADE_AMOUNT = float(round(balance/close, precision))     
            
            # create order
            order_succeeded = order(SIDE_SELL, TRADE_AMOUNT, TRADE_TICK, "SHORT")

            # if successful add details to array, calculate average entry / high price, count number of trades
            if order_succeeded:
                in_short = True
                buys.append(entry_price)
                entry_av = average(buys, len(buys))
                low_price = entry_av
                trade_total +=1

    if (trend and not t_value[-2]) or close > stop_loss_short:

        if in_short:

            TRADE_AMOUNT = qty

            print("\n---> close! close! close!")

            order_succeeded = order(SIDE_BUY, TRADE_AMOUNT, TRADE_TICK, "SHORT")

            if order_succeeded:
                balance = position_value
                in_short = False
                position_value = 0
                stop_loss_short = 10000
                trade_total = 0
                low_price = 0
                TRADE_AMOUNT = 0
                pnl_usd = 0.0
                pnl = 0.0
                entry_av = 0
                buys.clear()

        if not in_long and trend:    

            print(f"\n---> buy! buy! buy!")

            TRADE_AMOUNT = float(round(balance/close, precision))     

            order_succeeded = order(SIDE_BUY, TRADE_AMOUNT, TRADE_TICK, "LONG")

            if order_succeeded:
                in_long = True
                buys.append(entry_price)
                entry_av = average(buys, len(buys))
                high_price = entry_av
                trade_total += 1

# open websocket and run forever
ws = websocket.WebSocketApp(SOCKET, on_open=on_open,
                            on_close=on_close, on_message=on_message, on_error=on_error)
ws.run_forever()
